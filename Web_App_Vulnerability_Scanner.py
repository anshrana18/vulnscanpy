import requests   #HTTP GET/POST requests.
from bs4 import BeautifulSoup    #parse HTML
from urllib.parse import urljoin, urlparse

visited_links = set()

def valid_url(url):
    parsed = urlparse(url)
    return bool (parsed.netloc) and bool(parsed.scheme)  #*rlparse(url)	Breaks URL into parts *parsed.scheme Must be http or https *parsed.netloc	Must have a valid domain *bool(...)	Checks if it's non-empty

def crawl(url, domain):
    if url in visited_links:
        return

    print(f"[*] Visited url {url} ")
    visited_links.add(url)
    
    try:
        response = requests.get(url, timeout=3)
        soup = BeautifulSoup(response.text, "html.parser")

        for tag in soup.find_all("a"):
            href = tag.get("href")

            if href:
                full_url = urljoin(url, href)

                if domain in full_url:
                    crawl(full_url, domain)

        forms = soup.find_all("form")
        if forms:
            print(f" [-] Found {len(forms)} form(s) at {url}")
        

    except requests.RequestException as e:
        print(f"[!] Error visiting {url} -> {e}")    

################################################################ HTML_FORM ###################################################################################
    

def extract_forms(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "html.parser")
        forms = soup.find_all("form")
        print(f" [-] Found {len(forms)} form(s) at {url}")

    except requests.RequestException as e:
        print(f"[-] Error fetching {url}: {e}")
        return [] 
 ############################################################### SQL #####################################################################################


sql_payloads = ["' OR 1=1 --", "\" OR \"1\"=\"1", "' OR '1'='1"]

def test_sql_injection(url):
    for payload in sql_payloads:
        test_url = url + payload
        try:
            response = requests.get(test_url)
            if "sql" in response.text.lower() or "syntax" in response.text.lower():
                 print(f"[+] Possible SQL Injection Vulnerability detected with payload: {payload}")
                 vulnerability_report.append(f"[SQL Injection] Vulnerable URL: {test_url}")

        except:
            continue    #skips to the next payload if any error

 ############################################################### Submit form (sql and xss both) ###############################################################


def submit_form(url, form, payload):
    action = form.get("action")           #action url where the form submits to
    post_url = urljoin(url, action)
    method = form.get("method", "get").lower()     #Checks if the form uses GET or POST method
    inputs = form.find_all("input")

    data = {}

    for input_tag in inputs:
        name = input_tag.get("name")
        type = input_tag.get("type", "text")
        if name:
            if type == "text":
                data[name] = payload      #for username/password, we inject the payload
            else:
                data[name] = "test"       #for (hidden/submit), we give dummy values like "test".

    print(f"[+] Submitting form to {post_url} using {method.upper()} with payload: {payload}")
    

    if method == "post":
        return requests.post(post_url, data=data)
    else:
        return requests.get(post_url, params=data)


 ############################################################### Scanning Froms ############################################################################


def scan_sql_forms(url):
    print(f"\n [!] Scanning forms on {url} for SQL Injection")

    try:
        res = requests.get(url)
        soup = BeautifulSoup(res.text, "html.parser")
        forms = soup.find_all("form")
        for f in forms:
            for payload in sql_payloads:
                response = submit_form(url, f, payload)
                if "sql" in response.text.lower() or "syntax" in response.text.lower():
                    print(f"\n [!] SQL Injection detected in form with payload: {payload}")
                    vulnerability_report.append(f"[SQL Injection] Vulnerable Form on: {url}\nPayload used: {payload}")

    except Exception as e:
        print(f"[X] Error scanning forms: {e}")


 ############################################################### XSS ##################################################################################

xss_payload = ["<script>alert('XSS')</script>", "\"><script>alert('XSS')</script>", "'><img src=x onerror=alert('XSS')>"] 

def test_xss_in_url(url):
    for payload in xss_payload:
        test_url = url + payload

        try:
            response = requests.get(test_url, timeout=3)
            if payload in response.text:
                print(f"[+] XSS Vulnerability found in URL: {test_url}")
                vulnerability_report.append(f"[XSS] Vulnerable URL: {url}\nPayload used: {payload}")
        except requests.exceptions.RequestException:
            pass

def scan_xss_forms(url):
    try:
        response = requests.get(url, timeout=3)
        soup = BeautifulSoup(response.text, "html.parser")
        forms = soup.find_all("form")

        for form in forms:
            for payload in xss_payload:
                response = submit_form(url, form, payload)
                if payload in response.text:
                    print(f" [!] XSS vulnerability found in form at {url}")
                    vulnerability_report.append(f"[XSS] Vulnerable Form on: {url}\nPayload used: {payload}")

    except:
        pass

############################################################### Repost Generation ###########################################################################


vulnerability_report = []



def save_report(target_url):
    try:
        with open("vulnerability_report.txt", "w") as file:
            file.write("-----------------------------------------------------------------------------\n")
            file.write("                   Web Application Vulnerability Report\n")
            file.write("-----------------------------------------------------------------------------")
            file.write(f"\nTarget: {target_url}\n")
            file.write("=============================================================================\n\n")
            for entry in vulnerability_report:
                file.write(entry + "\n\n")
        print("\n[+] Report saved as 'vulnerability_report.txt'")
    except Exception as e:
        print(f"[!] Failed to save report: {e}")

# ðŸš€ Main Script Execution

def scan_sql_injection(url):
    test_sql_injection(url)
    scan_sql_forms(url)

def scan_xss(url):
    test_xss_in_url(url)
    scan_xss_forms(url)

if __name__ == "__main__":
    target_url = input("Enter the target URL (e.g., http://testphp.vulnweb.com): ").strip()
    if not target_url.startswith("http"):
        print("[!] Invalid URL. Please include http:// or https://")
    else:
        parsed = urlparse(target_url)
        domain = parsed.netloc

        crawl(target_url, domain)
        scan_sql_injection(target_url + "/artists.php?artist=1")
        scan_xss(target_url + "/search.php")
        save_report(target_url)
            

